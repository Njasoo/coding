template<class T>
struct RMQ {
    vector<T> a, t;
    bool flag; // 1: max, 0: min
    RMQ(vector<T> _a) : a(_a) {
        t.resize(a.size() * 4);
    }
    void build(int id, int l, int r) {
        if (l == r) {
            t[id] = a[l];
            return;
        }
        int mid = l + (r - l) / 2;
        build(id * 2 + 1, l, mid);
        build(id * 2 + 2, mid + 1, r);
        if (flag) t[id] = max(t[id * 2 + 1], t[id * 2 + 2]);
        else t[id] = min(t[id * 2 + 1], t[id * 2 + 2]);
    }
    T query(int id, int l, int r, int s, int e) {
        if (l == s && r == e) return t[id];
        int mid = l + (r - l) / 2;
        if (e <= mid) return query(id * 2 + 1, l, mid, s, e);
        else if (s > mid) return query(id * 2 + 2, mid + 1, r, s, e);
        auto lft = query(id * 2 + 1, l, mid, s, mid);
        auto rht = query(id * 2 + 2, mid + 1, r, mid + 1, e);
        return flag ? max(lft, rht) : min(lft, rht);
    }
};