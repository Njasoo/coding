const int MOD = 1e9 + 7;
vector<i64> fac, inv_fac;

i64 power(i64 u, i64 v) {
    ll res = 1;
    while (v) {
        if (v % 2) res = res * u % MOD;
        u = u * u % MOD;
        v /= 2;
    }
    return res;
}

void combInit(int n) {
    fac.resize(n + 1);
    inv_fac.resize(n + 1);
    fac[0] = 1;
    for (int i = 1; i <= n; i++) {
        fac[i] = fac[i - 1] * i % MOD;
    }
    inv_fac[n] = power(fac[n], MOD - 2);
    for (int i = n - 1; i >= 0; i--) {
        inv_fac[i] = inv_fac[i + 1] * (i + 1) % MOD;
    }
}

i64 C(int n, int k) {
    if (n < k) return 0;
    return (fac[n] * inv_fac[k] % MOD) * inv_fac[n - k] % MOD;
}