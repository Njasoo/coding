void build_max(int id, int l, int r) {
        if (l == r) {
                t_max[id] = a[l];
                return;
        }
        int mid = (l + r) >> 1;
        build_max(id << 1, l, mid);
        build_max(id << 1 | 1, mid + 1, r);
        t_max[id] = max(t_max[id << 1], t_max[id << 1 | 1]);
}
int query_max(int id, int l, int r, int s, int e) {
        if (l == s && r == e) {
                return t_max[id];
        }
        int mid = (l + r) >> 1;
        if (e <= mid) {
                return query_max(id << 1, l, mid, s, e);
        } else if (s > mid) {
                return query_max(id << 1 | 1, mid + 1, r, s, e);
        } else {
                return max(query_max(id << 1, l, mid, s, mid), query_max(id << 1 | 1, mid + 1, r, mid + 1, e));
        }
}
void build_min(int id, int l, int r) {
        if (l == r) {
                t_min[id] = a[l];
                return;
        }
        int mid = (l + r) >> 1;
        build_min(id << 1, l, mid);
        build_min(id << 1 | 1, mid + 1, r);
        t_min[id] = min(t_min[id << 1], t_min[id << 1 | 1]);
}
int query_min(int id, int l, int r, int s, int e) {
        if (l == s && r == e) {
                return t_min[id];
        }
        int mid = (l + r) >> 1;
        if (e <= mid) {
                return query_min(id << 1, l, mid, s, e);
        } else if (s > mid) {
                return query_min(id << 1 | 1, mid + 1, r, s, e);
        } else {
                return min(query_min(id << 1, l, mid, s, mid), query_min(id << 1 | 1, mid + 1, r, mid + 1, e));
        }
}
