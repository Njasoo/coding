本来以为这题可以用二分+djikstra轻松解决，但是我被最短路中的路径最大值给难住了
后来发现我连打印路径也不会
偷看了一眼题解，提到了并查集
也是二分答案，二分路径最大值，然后将所有小于mid的路径合并
最后检查起点和终点是否连通
这个思路太妙了，我居然没有想到

硬要总结一下思路的话，就是二分答案的时候我们更专注与答案的存在性
而不要求二分的过程当中还要继续求得最优解

不过当然还是暴力最爽，我只会用最模板最直接最一般的方法过掉一道题

#include <bits/stdc++.h>
using namespace std;
const int N = 1e4 + 5;
const int M = 2e4 + 5;
int n, m, s, t;
struct Edge {
  int from, to, cost;
}e[M];
int f[N];
int leader(int x) {
  while (f[x] != x) x = f[x] = f[f[x]];
  return x;
}
void merge(int x, int y) {
  x = leader(x);
  y = leader(y);
  f[y] = x;
}
bool same(int x, int y) {
  return leader(x) == leader(y);
}
bool check(int mid) {
  for (int i = 1; i <= n; i++) {
    f[i] = i;
  }
  for (int i = 1; i <= m; i++) {
    if (e[i].cost <= mid) {
      merge(e[i].from, e[i].to);
    }
  }
  return same(s, t);
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cin >> n >> m >> s >> t;
  for (int i = 1; i <= m; i++) {
    cin >> e[i].from >> e[i].to >> e[i].cost;
  }
  int l = 0, r = 1e9;
  int ans = 0;
  while (l <= r) {
    int mid = (l + r) >> 1;
    if (check(mid)) {
      r = mid - 1;
      ans = mid;
    } else {
      l = mid + 1;
    }
  }
  cout << ans << '\n';
  return 0;
}
