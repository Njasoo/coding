 知识点：

二维数组前缀和

s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + f[i][j];

(x1, y1) -> (x2, y2)构成的矩阵元素总和为

s[x2][y2] - s[x2][y1 - 1] - s[x1 - 1][y2] + s[x1 - 1][y1 - 1];


题目：

div2 841 D

给定一个矩阵，找到一个最大的正方形，使得它满足正方形里面的每一个元素都大于正方形的边长，答案返回正方形的边长。

思路：

通过分析时间复杂度，决定采用二分答案枚举边长

每一次二分，都对数组做一次二维前缀和，将大于边长的元素标记为1

那么每次二分就需要check矩阵里是否存在一个正方形的元素总和=mid*mid


代码：

#include <bits/stdc++.h>


using namespace std;


int main() {

    ios::sync_with_stdio(false);

    cin.tie(nullptr);

    int tt;

    cin >> tt;

    while (tt--) {

        int n, m;

        cin >> n >> m;

        vector<vector<int>> a(n + 1, vector<int>(m + 1));

        for (int i = 1; i <= n; i++) {

            for (int j = 1; j <= m; j++) {

                cin >> a[i][j];

            }

        }

        auto check = [&](int x) {

            vector<vector<int>> s(n + 1, vector<int>(m + 1));

            for (int i = 1; i <= n; i++) {

                for (int j = 1; j <= m; j++) {

                    s[i][j] = s[i][j - 1] + s[i - 1][j] - s[i - 1][j - 1] + (a[i][j] >= x);

                }

            }

            for (int i = 1; i + x - 1 <= n; i++) {

                for (int j = 1; j + x - 1 <= m; j++) {

                    int cnt = s[i + x - 1][j + x - 1] - s[i + x - 1][j - 1] - s[i - 1][j + x - 1] + s[i - 1][j - 1];

                    if (cnt == x * x) {

                        return true;

                    }

                }

            }

            return false;

        };

        int l = 1, r = min(n, m);

        int ans = 0;

        while (l <= r) {

            int mid = (l + r) >> 1;

            if (check(mid)) {

                l = mid + 1;

                ans = mid;

            } else {

                r = mid - 1;

            }

        }

        cout << ans << '\n';

    }   

    return 0;

}
