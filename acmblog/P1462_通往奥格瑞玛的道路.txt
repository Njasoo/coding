二分加最短路

是有条件（不超过最高价钱的就走）的最短路，有点难想到，一开始我是暴力去遍历，但是我觉得时间复杂度应该可以，结果不行，我也没有去细究为什么会TLE
坑点就是记得判断第一个点是否超过最高费用

#include <bits/stdc++.h>
using namespace std;
const int N = (int) 1e4 + 5;
const int M = (int) 5e4 + 5;
int n, m, b;
int f[N];
struct Edge {
  int from, to, cost, next;
}e[M << 1];
int cnt = 0;
int head[N];
void add_edge(int u, int v, int w) {
  cnt++;
  e[cnt].from = u;
  e[cnt].to = v;
  e[cnt].cost = w;
  e[cnt].next = head[u];
  head[u] = cnt;
}
struct node {
  int w, now;
  bool operator < (const node& x) const {
    return x.w < w;
  }
};
bool vis[N];
int dis[N];
priority_queue<node> q;
bool check(int mid) {
  if (f[1] > mid) return false;
  memset(dis, 0x3f, sizeof(dis));
  memset(vis, 0, sizeof(vis));
  dis[1] = 0;
  q.push({0, 1});
  while (!q.empty()) {
    node x = q.top();
    q.pop();
    int u = x.now;
    if (vis[u]) continue;
    vis[u] = 1;
    for (int i = head[u]; i; i = e[i].next) {
      int v = e[i].to;
      int w = e[i].cost;
      if (f[v] > mid) continue;
      if (dis[u] + w < dis[v]) {
        dis[v] = dis[u] + w;
        q.push({dis[v], v});
      }
    }
  }
  return dis[n] <= b;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  cin >> n >> m >> b;
  for (int i = 1; i <= n; i++) {
    cin >> f[i];
  }
  for (int i = 1; i <= m; i++) {
    int x, y, z;
    cin >> x >> y >> z;
    add_edge(x, y, z);
    add_edge(y, x, z);
  }
  int l = 0, r = (int) 1e9;
  int ans = -1;
  while (l <= r) {
    int mid = (l + r) >> 1;
    if (check(mid)) {
      r = mid - 1;
      ans = mid;
    } else {
      l = mid + 1;
    }
  }
//  cerr << "ans: " << ans << endl;
  if (ans == -1) {
    cout << "AFK\n";
  } else {
    cout << ans << '\n';
  }
  return 0;
}
