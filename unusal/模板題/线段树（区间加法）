void build(int id,int l,int r){
    tag[id]=0;
    if(l==r){
        val[id]=a[l];
        return;
    }
    int mid=(l+r)/2;
    build(id*2,l,mid);
    build(id*2+1,mid+1,r);
    val[id]=val[id*2]+val[id*2+1];
}

void push_down(int id){
    tag[id*2]+=tag[id];
    tag[id*2+1]+=tag[id];
    tag[id]=0;
}

void pull_up(int id,int l,int r){
    int mid=(l+r)/2;
    val[id]=val[id*2]+tag[id*2]*(mid-l+1)+val[id*2+1]+tag[id*2+1]*(r-mid);
}

void update(int id,int l,int r,int s,int e,ll k){
    if(e<l||s>r)return;
    if(s<=l&&e>=r){
        tag[id]+=k;
        return;
    }
    int mid=(l+r)/2;
    push_down(id);
    update(id*2,l,mid,s,e,k);
    update(id*2+1,mid+1,r,s,e,k);
    pull_up(id,l,r);
}

ll qry(int id,int l,int r,int s,int e){
    if(e<l||s>r)return 0;
    if(s<=l&&e>=r)return val[id]+tag[id]*(r-l+1);
    push_down(id);
    int mid=(l+r)/2;
    ll res=qry(id*2,l,mid,s,e)+qry(id*2+1,mid+1,r,s,e);
    pull_up(id,l,r);
    return res;
}